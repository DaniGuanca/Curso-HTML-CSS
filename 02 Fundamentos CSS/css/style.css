/*Son mala practica porque son bloqueantes a la hora que el navegador lee esta instruccion*/
@import url("otraHoja.css");

h1{
  color: orangered;
  background-color: black;
}

/*Selectores basicos*/

p{
  color: midnightblue;
}

/*Dar estilos con id se considera una mala practica*/
#parrafo-dos{
  background-color: skyblue;
}

/*Dar estilos con clases nos permite reeutilizar nuestro codigo css*/
.text-20{
  font-size: 20px;
}

.text-32{
  font-size: 32px;
}

.bg-skyblue{
  background-color: skyblue;
}

.bg-steelblue{
  background-color: steelblue;
}

.text-white{
  color: white;
}

/*------------------------------------------------------------------------------------------------------*/

/*Selectores avanzados*/
.hijos-directos > li{
  background-color: thistle;
}

.hijos-descendientes b {
  background-color: thistle;
}

/*Los selectores de hermanos van a aplicar a elementos hermanos y que esten por debajo del elemento de referencia*/
.hermanos-general ~ li{
  background-color: thistle;
}

.hermanos-adyacentes + li {
  background-color: thistle;
}

/*Selectores de atributos*/
.selectores-atributos a[href] {
  color: orangered;
}

.selectores-atributos a[target="_blank"] {
  font-weight: bold;
}

/* * es caracter comodin, quiere decir que todos los href que tengan dentro la palabra jonmircha le aplica el estilo. Es como un contains() */
.selectores-atributos a[href*="jonmircha"] {
  font-size: 24px;
}

/* ^ es otro comodin, quiere decir que el estilo se aplica cuando empiece con la palabra despues del triangulo  */
.selectores-atributos a[href^="http:"] {
  text-decoration: none;
}

/* $ es un comodin que quiere decir que el estilo se aplica cuando la palabra exista al final del atributo indicado */
.selectores-atributos a[href$=".com"] {
  background-color: black;
}

/* ~ es un comodin que aplica el estilo si contiene el texto en cuestion en una lista separada por espacios */
.selectores-atributos a[class~="cursos"] {
  background-color: midnightblue;
}

/* | es un comodin que aplica el estilo si contiene el texto en cuestion en una lista separada por espacios y que despues del texto en cuestion viene un guion medio (-) */
.selectores-atributos a[class|="menu"] {
  font-style: italic;
}

/*Selector Universal*/
*{
  font-family: sans-serif;
}

.selector-universal * {
  font-size: 24px;
}


/*------------------------------------------------------------------------------------------------------*/
/*PSEUDOCLASES
  Dan estilos dependiendo el contexto o dependiendode ciertos estados que tenga el elemento html
  Se accede con dos puntos
*/

.form-pseudoclases *:required {
  border-color: yellow;
}

.form-pseudoclases *:valid {
  border-color: green;
}

.form-pseudoclases *:invalid {
  border-color: red;
}

.form-pseudoclases *:focus{
  background-color: skyblue;
}

.form-pseudoclases *:disabled{
  background-color: pink;
}

.menu-pseudoclases a:visited {
  color: olive;
}

/*Los hover son interactivos, todos los que son interactivos tienen que ir al final para que otras clases no la pisen*/
.menu-pseudoclases a:hover{
  color: orange;
}

.p-pseudoclases:hover{
  font-size: 20px;
}

#temario-css:target {
  background-color: lightgreen;
}

.lista-pseudoclases li:first-child{
  color: green;
}

.lista-pseudoclases li:last-child{
  color:violet;
}

/*nth el n elemento
nth child recibe entre parentesis el numero del elemento a aplicar el estilo, si es 3 aplica al tercer elemento*/

.lista-pseudoclases li:nth-child(3){
  color: navy;
}

/*el n es para ir de n en n. 4n es que voy de 4 en 4 elementos (el numero 4 luego el 8 luego 12 y asi)*/
.lista-pseudoclases li:nth-child(4n){
  font-size: 20px;
}

.lista-pseudoclases li:nth-child(3n + 1){
  font-weight: bold;
}

/*pares*/
.lista-pseudoclases li:nth-child(even){
  background-color: yellow;
}

/*impares*/
.lista-pseudoclases li:nth-child(odd) {
  background-color: orange;
}

/*ESTO NO CUMPLE PORQUE EL PRIMER HIJO NO ES P ES HEADER*/ 
.articulo-pseudoclases p:first-child{
  background-color: pink;
}

/*first of type toma el primer elemento de la etiqueta mandada*/
.articulo-pseudoclases p:first-of-type {
  background-color: pink;
}

.articulo-pseudoclases p:first-of-type {
  background-color: pink;
}

.articulo-pseudoclases p:last-of-type{
  background-color: violet;
}

.articulo-pseudoclases p:nth-of-type(3) {
  background-color: fuchsia;
}

/* :not() NEGACION: aplicar estilos a todos los elementos excepto al definido*/
.articulo-pseudoclases *:not(p) {
  background-color: brown;
}

/*------------------------------------------------------------------------------------------------------*/
/*PSEUDOELEMENTOS
  Dan estilos a partes especificas de un elemento,
  se usan dos doble puntos para identificarlos (::)

  ::after y ::before : after y before nos permiten agregar contenido antes o despues de un elemento en particular. El contenido se pone en el atributo content
*/
.saga-geminis::before{
  content: "ü§º‚Äç‚ôÇÔ∏è";
}

.saga-geminis::after {
  content: "‚ôä";
}

.saga-precio::before{
  content: "$";
  font-weight: bold;
}

.saga-precio::after{
  content: "USD";
  font-weight: bold;
}

.p-pseudoelementos::first-letter{
  font-weight: bold;
  font-size: 32px;
}

.p-pseudoelementos::first-line{
  color: coral;
}

.p-pseudoelementos::selection{
  color:greenyellow;
  background-color: black;
}

/*------------------------------------------------------------------------------------------------------*/
/*AGRUPAR SELECTORES
  se agrupan por coma (elemento, otro elemento {})*/
.form-agrupar-selectores input[type="text"], .form-agrupar-selectores input[type="email"], .form-agrupar-selectores textarea{
  border-color: yellow;
  background-color: black;
  font-size: 20px;
  display: block;
  width: 300px;
  border-width: 2px;
  border-style: dashed;
}

/*------------------------------------------------------------------------------------------------------*/
/*EL ALGORITMO DE CSS 
  Es la forma en que el navegador aplica estilos al documento HTML. Es vital entender este concepto para que entiendas como se aplican y en algunas ocasiones se sobreescriben las reglas CSS.  
    1)La cascada
    2)La especificidad 
    3)La herencia

  La cascada es el mecanismo en que el navegador aplica los estilos. Segun el siguiente orden:
    1)El origen del codigo:
      -El user agent (estilos por defecto del navegador)
      -Personalizacion del usaurio (zoom tema claro tema oscuro)
      -Estilos del autor (el codigo css)    
    2)La especificidad del selector
    3)Orden de aparicion

  La especificidad es el peso que tiene un selector cuando hay conflictos de estilos. Se calcula de la siguiente forma:
    Etiquetas y pseudoelementos.................... 0,0,0,1
    Clases, atributos y pseudoclases............... 0,0,1,0
    Identificadores................................ 0,1,0,0
    Estilos en linea............................... 1,0,0,0
    !important..................................... Rompe la especificidad

  La herencia es la capacidad de un selector de heredar los valores de sus ancestros mas cercanos, para aplicarla se usa el valor inherit, si queremos evitarla podemos asignar otro valor o inicializar la propiedad en cuestion con el valor inicial
*/

blockquote{
  background-color: burlywood;
}

/*ESTE LE VA A GANAR AL blockquote.cita-marco POR ESPECIFICIDAD (1,0,0)*/
#cita-marco{
  background-color: lightgreen;
}

/*Va a aplicar este estilo porque gana por ESPECIFICIDAD (0,1,1)*/
blockquote.cita-marco {
  background-color: tomato;
}

.cita-marco{
  background-color: cornflowerblue;
  font-size: 32px;
}

.cita-marco cite{
  background-color: pink;
  /*asi uso la herencia*/
  background-color: inherit;
}

/* 
https://autoprefixer.github.io/
https://caniuse.com/
Prefijos de los navegadores
-webkit-user-select: none;
-moz-user-select: none;
-ms-user-select: none;
user-select: none;
*/