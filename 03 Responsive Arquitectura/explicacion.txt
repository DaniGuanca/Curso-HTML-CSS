CURSO HTML Y CSS PARTE 5

RESPONSIVE ARQUITECTURA

CONTENEDORES FLEXIBLES
  Todos los elementos de nuestra interfaz tienen que ser flexibles y responsivos.
  Los elementos flexibles se le definen la anchura y altura con medidas relativas, no con absolutas.

    .box-flexible {
      width: 50%;
      height: 20vh; /*Se le puede poner porcentajes pero para que la altura en porcentajes funcione el padre tiene que tener una altura bien definida en pixeles o medida absoluta. Entonces como muchas veces no tienen altura definida conviene usar la altura del VIEWPORT. IMPORTANTE*/
    }

  PROPIEDADES MAX-WIDTH MIN-WIDTH Y MAX-HEIGHT Y MIN-HEIGHT
    En vez de definir ancho y altura maxima puedo definir puntos maximos y minimos, aca si se pueden usar unidades absolutas.

      .box-flexible-2 {
        max-width: 960px;
        min-width: 280px;

        max-height: 480px;
        min-height: 280px;
      }

  IMPORTANTE! 
    SI DEFINIMOS MAXIMOS Y MINIMOS Y APARTE USAMOS TAMBIEN WIDTH Y HEIGHT CON PIXELES EL ESTILO SE ROMPE PORQUE WIDHT Y HEIGHT TIENEN MAS JERARQUIA QUE MIN Y MAX. 
    EN CAMBIO CUANDO USAMOS MAX Y MIN JUNTO CON MIN Y HEIGHT PERO CON UNIDADES RELATIVAS COMO % Y VH ENTONCES ACA SI NO SE ROMPE Y FUNCIONA BIEN

------------------------------------------------------------------------------------------------------------------------------------------------
MULTIMEDIA FLEXIBLE (Todo lo que no es texto)
  Es como ya veniamos haciendo. Anchura 100% altura auto
  
    img, audio, video, iframe, canvas, svg, picture {
      max-width:100%;
      height: auto;
    }

  Para imagenes hay otras formas tambien como los atributos srcet y sizes y la etiqueta picture.

  ATRIBUTOS SRCET Y SIZES
    Permiten mejorar el rendimiento de la carga al colocar la imagen mas adecuada de acuerdo de la tamaño de pantalla o tambien por el aspect ratio (resolucion de pantalla).

    Por resolucion de pantalla: en la etiqueta img pongo el atributo srcet y pongo la url de la imagen + el aspect ratio (1x 1.5x 2x etc) que le corresponde y voy separando las imagenes por comas.

       <img src="img/html5-3d-600.png" alt="HTML5"
        srcset="img/html5-3d-600.png 1x, img/html5-3d-900.png 1.5x, img/html5-3d-1200.png 2x">

    Por tamaño de pantalla: en la etiqueta img pongo el atributo srcet y pongo la url de la imagen + la anchura a partir de la que se va a ver esa imagen en pixeles (600w 900w 1200w etc) y voy separando por comas.

      <img src="img/html5-3d-600.png" alt="HTML5"
        srcset="img/html5-3d-600.png 600w, img/html5-3d-900.png 900w, img/html5-3d-1200.png 1200w">

    El atributo SIZES nos permite meter mediaquerys a la etiqueta imagen para definir su anchura en pixeles. Mientras que el srcet lo que hace es cargar una imagen grande o pequeña segun la pantalla. SIZES nos va a ir modificando con media querie el ancho de la imagen que trajo el srcet. Se usa poniendo sizes la media querie y el tamaño de ancho de la imagen en pixeles para esa media querie. Si quiero mas medias queries las separo por comas.

      <img src="img/html5-3d-600.png" alt="HTML5"
        srcset="img/html5-3d-600.png 600w, img/html5-3d-900.png 900w, img/html5-3d-1200.png 1200w"
        sizes="(max:width:480px) 300px, (max-with:600px) 480px, (max-width:768px) 600px, (max-width:1024px) 900px, (min-width:1200px) 1200px">

  
  ETIQUETA PICTURE (ES BUENISIMA ESTA!!!!!!!!!!!)
    El objetivo de esta etiqueta, no es sólo mostrar diferentes tamaños de la misma imagen, sino también mostrar imágenes diferentes. Por ejemplo, recortar una imagen de forma diferente según el tamaño de la pantalla y las diferencias en el diseño. Esto se conoce como "dirección de arte".
    Se usa poniendo etiqueta picture adentro etiqueta source con la imagen a cargar y dentro del atributo media la media querie en la que va a cargar esa imagen. Tambien una etiqueta img para la imagen por defecto.

      <picture>
        <!--De 1024px para arriba muestra el kitten large asi funciona-->
        <source srcset="img/kitten-large.png" media="(min-width:1024px)">
        <source srcset="img/kitten-medium.png" media="(min-width:600px)">
        <img src="img/kitten-small.png" alt="k">
        <!--img es por si algun navegador no soporta picture muestra solo la imagen por defecto-->
      </picture>

      <!--Tambien puedo poner picture para poner imagenes que soporte el navegador. Si no soporta webp carga la comun en jpg-->
      <picture>
        <source srcset="img/butterfly.webp" type="image/webp">
        <img src="img/butterfly.jpg" alt="butter">
      </picture>



------------------------------------------------------------------------------------------------------------------------------------------------
VIDEOS RESPONSIVOS
  La primer tecnica es hacer max-width: 100% y height auto.

  Otra tecnica muy buena sobre todo para iframes y youtube y widescreen (FORMA VIEJA)
    .responsive-media {
      position: relative;
      max-width: 100%;
      height: 0;
      /*
        Formato widescreen, le damos ese padding bottom para simular altura para el formato widescreen ya que los porcentajes en altura no sirven si el padre no tiene altura bien definida y porque es dificil calcular el 56.25% en vh.

        Widescreen 16:9
          16 ----> 100%
          9  ----> 56.25%
      */
      padding-bottom: 56.25%;
    }

    .responsive-media > * {
      position: absolute;
      width: 100%;
      height: 100%;
    }


  TECNICA NUEVA Y MEJOR
    Al video le apicas la propiedad css aspect ratio y elegis el ratio que queres.

    <video class="aspect-ratio-16-9" src="assets/kenai.mp4" controls></video>

    .aspect-ratio-16-9 {
      /*aspect-ratio: 4 / 3;*/
      aspect-ratio: 16 / 9;
    } 


------------------------------------------------------------------------------------------------------------------------------------------------
IFRAMES RESPONSIVOS
  La primer tecnica es hacer max-width: 100% y height auto. Pero le re jode la altura no conviene para nada.
  PERO SE PUEDEN USAR LAS OTRAS DOS TECNICAS QUE CON VIDEOS, SE UTILIZAN EXACTAMENTE IGUAL EN VEZ DE VIDEO ES IFRAME Y LISTO. CONVIENE LA ULTIMA LA MEJOR SIEMPRE. SIRVE PARA CUALQUIER IFRAME SEA YOUTUBE O MAPS CUALQUIERA.



------------------------------------------------------------------------------------------------------------------------------------------------
MEDIA QUERIES
  La teoria la mayoria de la teoria esta en el index.html. Basicamente son preguntas que se hacen al navegador, si esta en modo horizontal osea la orientacion, el tipo de pantalla, el modo dark light pero la que mas uso es preguntar la max y la min anchura para el responsive.

    @media screen and (max-width:480px) and (orientation:portrait) {
      /* 
       Código CSS que se aplicará cuando se cumpla la media queries
      */
    }

  En style.css hay varios ejemplos de otras cosas por media queries como el print y el modo dark light etc.
    MIN WIDTH ES MAS PARA MOBILE FIRST
    MIN WIDTH ES MAS PARA DESKTOP FIRST
    INTENTAR NO MEZCLARLAS


------------------------------------------------------------------------------------------------------------------------------------------------
BREAKPOINTS
  Medida punto de interrupcion para ir poniendo estilos css.

  Estos son los breakpoints:
    320px	  Para dispositivos con pantallas pequeñas, como los teléfonos en modo vertical.

    480px	  Para dispositivos con pantallas pequeñas, como los teléfonos, en modo horizontal.

    600px	  Tabletas pequeñas, como el Amazon Kindle (600×800) y Barnes & Noble Nook (600×1024), en modo vertical.

    768px	  Tabletas de diez pulgadas como el iPad (768×1024), en modo vertical.

    1024px	Tabletas como el iPad (1024×768), en modo horizontal, así como algunas pantallas de ordenador portátil, netbook, y de escritorio.

    1200px	Para pantallas panorámicas, principalmente portátiles y de escritorio.


  ¡IMPORTANTE! Convierte tus Breakpoints a EMs
    ¿Por qué?
    Aunque los pixeles se consideran una unidad de medida absoluta, en realidad son unidades relativas a la resolución de pantalla del dispositivo que lo visualiza, si dicho dispositivo tiene una densidad mayor a la normal, entonces la proporción de los pixeles cambiará, por ello es importante que los breakpoints de las media queries se conviertan a ems que si son unidades relativas y proporcionales.

    Objetivo en pixeles / Contexto en pixeles = Resultado en Ems

      320px / 16px = 20em

      480px / 16px = 30em

      600px / 16px = 37.5em

      768px / 16px = 48em

      1024px / 16px = 64em

      1200px / 16px = 75em


------------------------------------------------------------------------------------------------------------------------------------------------
VIEWPORT

  El viewport fue introducido por Apple en Safari móvil, para ayudar a mejorar la presentación de los sitios en dispositivos como el iPhone, iPod Touch o iPad; posteriormente se volvió un estándar en todos los navegadores.

  La etiqueta viewport es el área visible de nuestro navegador y nos permite definir el ancho, alto y escala del área usada por el navegador para mostrar el contenido.

  IMPORTANTE: Si no agregamos esta meta etiqueta a nuestros documentos HTML tendremos problemas de visualización.

  El viewport tiene 6 atributos importantes:

    width: define el ancho visible, suele usarse la constante device-width para que se adapte al ancho del dispositivo.
    height: define el alto visible, suele usarse la constante device-height para que se adapte al alto del dispositivo.
    initial-scale: define la escala inicial a la que deberá visualizarse el contenido, siendo 1 el 100%.
    minimum-scale: define la escala mínima a la que se podrá hacer zoom al contenido, por ejemplo si se configura .5 significa que se podrá hacer un zoom de hasta el 50%.
    maximum-scale: define la escala máxima a la que se podrá hacer zoom al contenido, por ejemplo si se configura 3 significa que se podrá hacer un zoom de hasta el 300%.
    user-scalable: define si el usuario puede escalar o no el contenido, sus valores son yes por defecto y no para bloquear esta propiedad.

  De los 6 atributos mencionados, HAY 2 QUE SON MUY IMPORTANTES DEFINIR el ANCHO y la ESCALA INICIAL, para que el contenido se adapte al tamaño del dispositivo.

  Adicionalmente se recomienda que no se especifique la máxima escala, ni bloquear la capacidad de escalar el contenido, ya que independientemente de que el documento se diseñe con responsive, algunos usuarios con capacidades visuales diferentes, podrían tener problemas al ver el contenido y desearían aumentar el tamaño del contenido, si definimos una escala máxima o bloqueamos la capacidad de escalar el contenido produciremos en estos usuarios una mala y frustrante experiencia de usuario.

  La propiedad del alto es opcional definirla, se utilizara cuando necesitemos condicionar el alto del contenido.

  Por lo anterior la etiqueta meta viewport tendría que definirse de la siguiente manera:

    <meta name="viewport" content="width=device-width,initial-scale=1.0">



------------------------------------------------------------------------------------------------------------------------------------------------
GRID RESPONSIVA (ESTO ESTA MUY BUENO PORQUE ESTA HECHO CON FLEXBOX)
  Esta en el archivo grid.css asi despues puedo reutilizar en otros proyectos.
  Distribucion de elementos en columnas para el sistema 12 columnas:
    Grids (12 columnas)
      12 / 1  = 12
      12 / 2  = 6
      12 / 3  = 4
      12 / 4  = 3
      12 / 6  = 2
      12 / 12 = 1

      Ejemplo de distribucion de varios elementos:
      5 + 7 = 12
      2 + 5 + 5 = 12
      4 + 2 + 3 + 3 = 12

      
  Para empezar tiene que definir que porcentaje de la pantalla va a ocupar cada columna eso lo saca con la regla de 3:
    12 columnas --------- 100%
    x  columnas --------- y%

  Cuando usamos display flex se acomodan todos los elementos hijos del elemento y no les importa el tamaño entonces cuando hay muchos desborda. Para evitar eso ponemos flex-wrap en wrap esto va a hacer que cuando haya muchos elementos en vez desbordar cuando supere el tamaño del padre lo mande para abajo. En la cheetsheet de flexbox que tengo instalada en el visual code esta bien con graficos para entender mejor.

  Se crean las clases row como va a contener los elementos tienen display flex y flex-wrap en wrap.
  Y se crean las clases columnas: col-1, col-2, col-3, col-4, col-5, col-6, col-7, col-8, col-9, col-10, col-11 y col-12. Y vamos a variar el width en porcentaje con el valor que sacamos calculando de la regla de 3.

  Tamaños (Mediaqueries)
    xs ------- 0              ------------ 479px  -------- 480res
    s  ------- 480px (30em)   ------------ 767px  -------- 800res
    md ------- 768px (48em)   ------------ 991px  -------- 1024res
    lg ------- 992px (62em)   ------------ 1199px -------- 1280res
    xl ------- +1200px (75em) ---------------------------- 1281res

  ESTAMOS USANDO MOBILE FIRST
    .row {
      display: flex;
      flex-wrap: wrap;
    }

    .col-1 {
      width: 8.333333333333333%;
    }

    .col-2 {
      width: 16.66666666666667%;
    }

    .col-3 {
      width: 25%;
    }

    .col-4 {
      width: 33.33333333333333%;
    }

    .col-5 {
      width: 41.66666666666667%;
    }

    .col-6 {
      width: 50%;
    }

    .col-7 {
      width: 58.33333333333333%;
    }

    .col-8 {
      width: 66.66666666666667%;
    }

    .col-9 {
      width: 75%;
    }

    .col-10 {
      width: 83.33333333333333%;
    }

    .col-11 {
      width: 91.66666666666667%;
    }

    .col-12 {
      width: 100%;
    }

    /* Mobile First entonces los de arriba aplican a xs*/
    @media screen and (min-width: 30em) {
      .col-sm-1 {
        width: 8.333333333333333%;
      }

      .col-sm-2 {
        width: 16.66666666666667%;
      }

      .col-sm-3 {
        width: 25%;
      }

      .col-sm-4 {
        width: 33.33333333333333%;
      }

      .col-sm-5 {
        width: 41.66666666666667%;
      }

      .col-sm-6 {
        width: 50%;
      }

      .col-sm-7 {
        width: 58.33333333333333%;
      }

      .col-sm-8 {
        width: 66.66666666666667%;
      }

      .col-sm-9 {
        width: 75%;
      }

      .col-sm-10 {
        width: 83.33333333333333%;
      }

      .col-sm-11 {
        width: 91.66666666666667%;
      }

      .col-sm-12 {
        width: 100%;
      }
    }

    @media screen and (min-width: 48em) {
      .col-md-1 {
        width: 8.333333333333333%;
      }

      .col-md-2 {
        width: 16.66666666666667%;
      }

      .col-md-3 {
        width: 25%;
      }

      .col-md-4 {
        width: 33.33333333333333%;
      }

      .col-md-5 {
        width: 41.66666666666667%;
      }

      .col-md-6 {
        width: 50%;
      }

      .col-md-7 {
        width: 58.33333333333333%;
      }

      .col-md-8 {
        width: 66.66666666666667%;
      }

      .col-md-9 {
        width: 75%;
      }

      .col-md-10 {
        width: 83.33333333333333%;
      }

      .col-md-11 {
        width: 91.66666666666667%;
      }

      .col-md-12 {
        width: 100%;
      }
    }

    @media screen and (min-width: 62em) {
      .col-lg-1 {
        width: 8.333333333333333%;
      }

      .col-lg-2 {
        width: 16.66666666666667%;
      }

      .col-lg-3 {
        width: 25%;
      }

      .col-lg-4 {
        width: 33.33333333333333%;
      }

      .col-lg-5 {
        width: 41.66666666666667%;
      }

      .col-lg-6 {
        width: 50%;
      }

      .col-lg-7 {
        width: 58.33333333333333%;
      }

      .col-lg-8 {
        width: 66.66666666666667%;
      }

      .col-lg-9 {
        width: 75%;
      }

      .col-lg-10 {
        width: 83.33333333333333%;
      }

      .col-lg-11 {
        width: 91.66666666666667%;
      }

      .col-lg-12 {
        width: 100%;
      }
    }

    @media screen and (min-width: 75em) {
      .col-xl-1 {
        width: 8.333333333333333%;
      }

      .col-xl-2 {
        width: 16.66666666666667%;
      }

      .col-xl-3 {
        width: 25%;
      }

      .col-xl-4 {
        width: 33.33333333333333%;
      }

      .col-xl-5 {
        width: 41.66666666666667%;
      }

      .col-xl-6 {
        width: 50%;
      }

      .col-xl-7 {
        width: 58.33333333333333%;
      }

      .col-xl-8 {
        width: 66.66666666666667%;
      }

      .col-xl-9 {
        width: 75%;
      }

      .col-xl-10 {
        width: 83.33333333333333%;
      }

      .col-xl-11 {
        width: 91.66666666666667%;
      }

      .col-xl-12 {
        width: 100%;
      }
    }

  Ejemplo de como usarla:
    <section class="row">
      <article class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2">Elemento 1</article>
      <article class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2">Elemento 2</article>
      <article class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2">Elemento 3</article>
      <article class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2">Elemento 4</article>
    </section>

  En extra large queria que ocupen dos columnas entonces van a haber 6 elementos, en large puse 3 columnas entonces se van a ver 4 (3x4 = 12), en medium puse 4 columnas entonces se van a ver 3 elementos, en small puse 6 columna entonces se ven 2 elementos y en xs puse doce columuna para que se vea un solo elemento


LISTO LA GRILLA!!!
IGUAL USAR GRID CSS ES MAS NUEVO Y MAS PIOLA PORQUE TE DEJA HACER GRID RESPONSIVA SIN MEDIA QUERY


------------------------------------------------------------------------------------------------------------------------------------------------
FEATURE QUERIES
  Las Feature Queries son reglas CSS que le preguntan al navegador si soportan o no, una determinada propiedad o valor. Sirve mucho para cuando nuevas tecnologias, con las Feature queries puedo preguntar si el navegador la soporta y en caso que si pues las uso. MUY BUENO PARA RETROCOMPATIBILIDAD.

    @supports (display: grid) {
      /* 
        Código CSS que se aplicará cuando se cumpla la feature queries
      */
    }

  Si quiero condicionar que NO lo soporte simplente uso la palabra not

    @supports not (display: grid) {
      /* 
        Código CSS que se aplicará cuando NO se cumpla la feature queries
      */
    }

  Puedo usar tambien los operadores AND y OR:

    @supports not (display: grid) and (grid-template-columns: subgrid){
      /* 
        Código CSS que se aplicará cuando se cumplan las feature queries
      */
    }

    @supports not (display: grid) or (grid-template-columns: subgrid){
      /* 
        Código CSS que se aplicará cuando se cumpla una feature queries
      */
    }
  



------------------------------------------------------------------------------------------------------------------------------------------------
CONTAINER QUERIES
  Los Container Queries nos permiten hacer componentes responsivos de interfaz de usuario, que no dependan del tamaño de la pantalla y las media queries para cambiar o adaptar el diseño de su contenido. Sino que dependan de sus propias necesidades de visualización.
  Por ejemplo una tarjeta que tenga una imagen que se va a ver en vertical y si su contenido como una imagen es de mas de 400px entonces la tarjeta por container queries pasaria a verse en modo horizontal.
  El ejemplo esta en index.html
  A LA FECHA DEL 24/5/2022 TODAVIA NO ESTA SOPORTADO POR LOS NAVEGADORES ESTA SOLO EN EXPERIMENTAL Y HAY QUE HABILITARLO DESDE EL NAVEGADOR. EN EDGE NO SIRVE ABRIRLO EN CHROME.

    .card {
      contain: layout inline-size-style;
    }

    @container (min-width: 600px) {
      .card-container {
        display: flex;
      }
    }


------------------------------------------------------------------------------------------------------------------------------------------------
SEO
Search Engine Optimization
  Mobilegeddon
  Es la actualización al algoritmo de Google, que está activo desde el 21 de abril de 2015.

  Teniendo en cuenta el auge imparable de los dispositivos móviles y el impacto que éstos están teniendo en las costumbres de uso de la web, Google hizo un comunicado a través de su blog oficial comentando algunas de las novedades que trae la actualización de su algoritmo.

  Mobilegeddon pretende actuar sobre todas aquellas webs que no sean amigables con los dispositivos móviles, es decir que no se adapten de forma óptima a dichos dispositivos.

  Dado que las estrategias de Google se enfocan cada vez más hacia estos dispositivos, es normal que el buscador quiera asegurarse que las webs que indexa cumplen los mínimos de calidad para móviles.

  Mobilegeddon, afecta:

  Exclusivamente a las búsquedas realizadas desde dispositivos móviles.
  La aplicación del algoritmo será en todos los idiomas y de forma global.
  No se aplicará a sitios webs completos , sólo a las páginas que no cumplan los criterios.


------------------------------------------------------------------------------------------------------------------------------------------------
RESPONSIVE DESIGN
Es el paradigma actual del diseño web. Son un conjunto de buenas prácticas a nivel de código CSS para adaptar el contenido del documento HTML al tamaño de pantalla del dispositivo que lo visualice.

Tiene 3 principios:

Grids Flexibles
Imágenes Flexibles
Media Queries
Fue propuesto por Ethan Marcotte en 2010.



Estrategias de Diseño Multidispositivos
  Las distintas estrategias estan en el index.html es teoria y bastante interesante esta bueno leer.
    
    Desktop First mobile first: ya los se.
    
    Adaptive Design: mediante el user agent detecta con javascript en front si estra entrando desde un celular o una computadora y segun el caso muestra una interfaz u otra, o incluso redirige a otra pagina como facebook que para celulares tiene el m.facebook. DIFERENTES FRONTS uno para desktop y uno para mobile.

    Responisve design + server side components (RESS): es igual al adaptive desing pero la deteccion del dispositivo y la decision de que componentes mandar o redireccionar se hacen desde el servidor. Esta bueno esto. DIFERENTES FRONTS uno para desktop y uno para mobile.

    Responsible Responsive Design: es el responsive design pero a la vez tambien mediante javascript detectamos las dimensiones de la pantalla y segun la dimension mandamos un contenido o no. Por ejemplo si es dimension de computadora podria embeber un iframe de youtube, pero si es un celular como no quiero que gaste datos de movil al pedo en vez de incrustarle el video solo le pongo el link. De ahi viene la palabra responsable. UN UNICO FRONT que se va a adaptando a la necesidades de las dimensiones o dispositivo.

    Fluid Design: tecnica nueva del 2020 voy a poner todo abajo porque esta muy piola es todo sin media queries.


------------------------------------------------------------------------------------------------------------------------------------------------
FLUID DESIGN (Es parte de las estrategias de diseño Multidispositivos pero lo pongo aca porque esta tecnica es la mas nueva y esta re buena)

  El Fluid Design es una técnica de Responsive Design que trata de escalar y adaptar el contenido al tamaño de la pantalla, sin la necesidad de ocupar media queries.

  En lugar de diseñar para un determinado número de breakpoints, el Fluid Design crea un sistema dentro del cual los elementos escalan de manera proporcional y fluida.

  Utiliza características y funciones modernas de CSS para hacer fluir las interfaces, por ejemplo:
    Contenedores fluidos
    Textos fluidos
    Grids responsivas sin media queries
    Uso de funciones como:
      calc
      min, max
      clamp
    Uso de unidades relativas como:
      EMS
      REMs
      EXs
      CHs
      Porcentajes
      Unidades del Viewport

  Fue propuesto por Trys Mudford en 2020.


LOS EJERCICIOS ESTAN EN EL INDEX.HTML Y SU STYLE.CSS
  GRID FLUIDA: Se hace con grid css muy facil con las siguientes dos lineas.

    .fluid-grid {
      display: grid;
      grid-template-columns: repeat(
        auto-fit,
        minmax(200px, 1fr)
      ); 
    
      Repeat recibe cuantas veces se va a repetir el patron de columnas y la unidad de medida.
      auto-fit dependendiendo del numero de items es el numero a repetir
      minmax() da un valor maximo y minimo
    }

  El html tiene la siguiente estructura:
  
    <section class="fluid-grid">
      <article class="fluid-item">Elemento 1</article>
      <article class="fluid-item">Elemento 2</article>
      <article class="fluid-item">Elemento 3</article>
      <article class="fluid-item">Elemento 4</article>
    </section/

  Y LISTO ESO ES TODO PARA HACER UNA GRID FLUIDA, SUPER FACIL.
-----------------------------------------------------------------

  TEXTO FLUIDO: Para esto Mudford el creador de fluid design deja en utopia el css para los tamaños de los textos. El link lo tengo en el index voy al enlace fluid type calculator en el css generator elijo la opcion de usar la funcion clamp() esto me simplifica mucho el css y copio y pego todo ese codigo donde lo quiera usar. Son variables que le puedo aplicar a mis propiedades. TAMBIEN SIRVEN PARA MARGINS Y PADDINGS
  
  Tambien hay otra forma por ethan marcot que es solamente al body font size hacerle un calculo de una unica linea.
  
    1° FORMA
      /*Codigo de la pagina calculadora*/
      /* @link https://utopia.fyi/type/calculator?c=320,21,1.2,1140,24,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l */

      :root {
        --step--2: clamp(0.91rem, calc(0.89rem + 0.1vw), 0.96rem);
        --step--1: clamp(1.09rem, calc(1.05rem + 0.21vw), 1.2rem);
        --step-0: clamp(1.31rem, calc(1.24rem + 0.37vw), 1.5rem);
        --step-1: clamp(1.58rem, calc(1.46rem + 0.59vw), 1.88rem);
        --step-2: clamp(1.89rem, calc(1.71rem + 0.89vw), 2.34rem);
        --step-3: clamp(2.27rem, calc(2.01rem + 1.29vw), 2.93rem);
        --step-4: clamp(2.72rem, calc(2.36rem + 1.83vw), 3.66rem);
        --step-5: clamp(3.27rem, calc(2.75rem + 2.56vw), 4.58rem);
      }

      /*Genero las clases para usar estas variables*/
      .step--2 {
        font-size: var(--step--2);
      }

      .step--1 {
        font-size: var(--step--1);
      }

      .step-0 {
        font-size: var(--step-0);
      }

      .step-1 {
        font-size: var(--step-1);
      }

      .step-2 {
        font-size: var(--step-2);
      }

      .step-3 {
        font-size: var(--step-3);
      }

      .step-4 {
        font-size: var(--step-4);
      }

      .step-5 {
        font-size: var(--step-5);
      }


    2° FORMA
      Si no quiero hacer tantas clases hay un hack de ethan marcot para hacer textos fluidos

      body {
        /*
          14 = tamaño de letra mas pequeño que quiero.
          18 = tamaño de letra mas grande que quiero.
          300 = tamaño de viewport mas pequeño.
          1400 = tamaño de viewport mas grande.
        */
        /* font-size: calc(14px + (18-14) * ((100vw - 300px) / (1400-300))); */
      }

-----------------------------------------------------------------

  CONTENEDORES FLUIDOS: Ideal para cards y cualquier contenedor para que fluya sin necesidadde media queries. Usamos clamp para esto que recibe calor minimo valor ideal y valor maximo.

    .box-fluid {
      width: clamp(400px, 60vw, 600px);
      height: clamp(200px, 30vh, 300px);
    }

    <div class="box-fluid"></div>

  Y LISTO ESO ES TODO DE CONTENEDORES FLUIDOS.

Y ESOS TRES COMPONENTES ENMARCAN LO QUE ES EL FLUID DESIGN CON SOLO ESOS TRES PUEDO HACER PAGINAS RESPONSIVAS SI USAR MEDIA QUERIES.
BUENISIMO!!!!!!!!!!!!!!


------------------------------------------------------------------------------------------------------------------------------------------------
ARQUITECTURA CSS
  Es para mantener el codigo organizado. Ordenado optimo y escalable
  Una buena arquitectura debe ser:
    Predecible: deben hacer lo que se supone, si haces una variable para cambiar el color de fondo debe solo hacer eso.
    Reutilizable: que se pueda usar en distintas secciones de manera rapida sin afectar otros elementos. Escribimos el codigo y le vamos asignando a las clases de los elementos que queremos que la implementen.
    Estable: debemos poder actualizar o modificar sin afectar otras reglas.
    Escalable: cuando la pagina comienza a crecer mas.

  Se recomiendan crear clases que solo hagan una cosa en particular y esas ir aplicandolas a los elementos html.

  DEBEMOS DISEÑAR SISTEMAS NO PAGINAS, hay que partir de lo general a lo particular osea dejar de maquetar de manera muy personal.

  En el index esta las slides de teoria bien explicadas

  Componente
    cumple una sola funcion.
    son independientes.
    son autocontenidos.
    son reutilizables.

  Despues podemos ir juntando componentes poner uno adentro de otro y asi se arma la interfaz.

  HERRAMIENTAS CSS PARA CREAR SISTEMAS
    Metodologias
    Frameworks
    Procesadores
    Guias de estilos

  METODOLOGIAS
    Nos permiten organizar y nombrar el codigo.
    
    BEM: a los componentes se llaman bloques. Un elemento es parte de un bloque. Para nombrarlos le ponen dos guiones bajos. 
      Ej: bloque search-form, elemento button =  search-form__button
      Ahora si quiere meter un modificador disabled por ejemplo la clase queda asi: searh-form__button search-form__button__disabled

    La atomic design tambien esta buena, podria juntar la filosofia de atomic design con la nomenclatura de BEM

  FRAMEWORKS
    Son marcos de trabajo que nos ofrecen componentes y utilidades de UI.

  PROCESADORES CSS
    PRE PROCESADORES
      Son herramientas que toman un lenguaje y lo transforman en CSS.

    POST PROCESADORES
      Son herramientas que procesan el CSS y lo optimizan y automatizan.

  GUIAS DE ESTILO
    Coleccion de elementos y reglas pre establecidas que aseguran la consistencia y coherencia de nuestro codigo.
